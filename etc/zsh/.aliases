#!/usr/bin/env zsh
# vim:syntax=zsh
# vim:filetype=zsh

# force load vim with custom config
alias vim="nvim"
alias ibrew=/usr/local/bin/brew

alias python=python3
alias pip=pip3

# pip3 alias
# alias pip3='python3 -m pip'
# venv alias
_venv() {
  python --version
  python -m venv $1
  $1/bin/pip install black neovim pyls isort mypy pylint

}
alias venv=_venv
_activate() {
  python --version
  source $1/bin/activate

}
alias activate=_activate

# Fix broken ls with correct values
alias ls='\ls -alhGP'

# Use exhuberant-ctags from homebrew
# alias ctags="$(brew --prefix)/bin/ctags"

# global justfile
# alias c='just --justfile ~/.justfile --working-directory ~'

# Wtf util dashboard
alias wtf='wtfutil'

# kubernetes
alias k='kubectl'

# add default ignore command to tree
alias tree="tree -a -I 'node_modules|.git|.DS_Store' --dirsfirst"

# fzf
# https://github.com/clvv/fasd
# alias j="fasd -dR | fzf +s"
# _jump() {
#   fasd -dR | fzf +s
# }
# bindkey '^J' _jump

#
# taskwarrior
#

# in for inbox items
alias in='task add +in'

# tick things that should appear in inbox after time
tickle () {
    deadline=$1
    shift
    in +tickle wait:$deadline $@
}
alias tick=tickle

# things to think about before dealing with next day - ONLY DO THIS ONCE, no snooze - yes/no question
alias think='tickle +1d'

# research
alias rnd='task add +rnd +next +@computer +@online'

webpage_title () {
    wget -qO- "$*" | hxselect -s '\n' -c  'title' 2>/dev/null
}

read_and_review () {
    link="$1"
    title=$(webpage_title $link)
    echo $title
    descr="\"Read and review: $title\""
    id=$(task add +next +rnr "$descr" | sed -n 's/Created task \(.*\)./\1/p')
    task "$id" annotate "$link"
}

alias rnr=read_and_review

alias grc='grc --config=generic.conf tail' # -n 100 -f

#
# timewarrior
#
alias tw='timew'


timew_summary() {
  period="${1:-:day}"
  tw summary :ids :annotations $period
}

alias ts=timew_summary

timew_next() {
  tw stop
  tw continue
  tw annotate @1 $1
}

alias tn=timew_next

timew_defined() {
  case "$1" in
    "admin")
      timew start bol admin && tw annotate "Catchup, admin, PR:s."
      ;;

    "standup")
      timew start bol meeting && tw annotate "Standup."
      ;;

    "sync")
      timew start bol meeting && tw annotate "Weekly team sync meeting."
      ;;

    "monday")
      timew start meeting && tw annotate "Company Monday meeting."
      ;;

    "")
      echo "admin"
      echo "standup"
      echo "sync"
      echo "monday"
      ;;
  esac
}

alias twd=timew_defined

### reports
timew_report() {
  nowmonth=$(gdate +%Y-%m)
  date_string=$(gdate -d "$nowmonth-15 last month" '+%Y_%m')
  tw :lastmonth leo >| "$HOME/reports/anton_emmerik_$date_string.txt"
  open "$HOME/reports"
}

alias report=timew_report

# tmuxp configuration and aliases
export TMUXP_CONFIGDIR=$HOME/.config/tmuxp

t() {
  name="$1"
  shift

  tmux has-session -t $name > /dev/null 2>&1
  if [ $? != 0 ]; then
    # no session with name found

    tmuxp_sessions=$(tmuxp ls)

    # if exists in tmuxp configurations load it
    if (($tmuxp_sessions[(Ie)$name])); then
      # load txmup detached
      tmuxp load -d -y $name $@
    else
      # create a new detached session with name
      tmux new -d -s $name $@
    fi
  fi


  if [ -n "${TMUX}" ]; then
    # if already in tmux switch
    tmux switch -t $name
  else
    # else attach
    tmux attach -t $name
  fi

}

_t() {
  local expl
  local -a sessions
  sessions=( ${${(f)"$(command tmux list-sessions)"}/:[ $'\t']##/:} )
  _describe -t sessions 'sessions' sessions "$@"

  configs=($(tmuxp ls))
  _describe -t configs 'configs' configs "$@"
}

compdef _t t

alias ta='tmux ls'

# alias du='du -sch * .*'
