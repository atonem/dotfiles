#!/usr/bin/env zsh
# vim:syntax=zsh
# vim:filetype=zsh

# force load vim with custom config
alias vim="nvim"
alias ibrew=/usr/local/bin/brew

alias python=python3
alias pip=pip3

# Fix broken ls with correct values
# alias ls='\ls -alhGP'

# Use exhuberant-ctags from homebrew
# alias ctags="$(brew --prefix)/bin/ctags"

# global justfile
# alias c='just --justfile ~/.justfile --working-directory ~'

# Wtf util dashboard
alias wtf='wtfutil'

# kubernetes
alias k='kubectl'

# joshuto
alias jo="joshuto"

# add default ignore command to tree
alias tree="tree -a -I 'node_modules|.git|.DS_Store' --dirsfirst"

# fzf
# https://github.com/clvv/fasd
# alias j="fasd -dR | fzf +s"
# _jump() {
#   fasd -dR | fzf +s
# }
# bindkey '^J' _jump

# load env vars from file for command
# FIXME: doesn't work for some reason...
source_env_file() {
  env_file="$PWD/${1}"
  echo $env_file
  env $(cat "$env_file" | grep -v "#" | xargs) "$@"
}
alias ev=source_env_file

#
# taskwarrior
#
alias taskui=taskwarrior-tui

#
# mise
#
alias mr="mise run"

# run taskwarrior with TASK_CONTEXT env var support
alias task='command task ${TASK_CONTEXT:+rc.context:${TASK_CONTEXT}}'

# in for inbox items
alias in='task add +in'

# force tw sync
alias tasks="$HOME/.task/task-sync.sh"
#
# # tick things that should appear in inbox after time
# tickle () {
#     deadline=$1
#     shift
#     in +tickle wait:$deadline $@
# }
# alias tick=tickle
#
# # things to think about before dealing with next day - ONLY DO THIS ONCE, no snooze - yes/no question
# alias think='tickle +1d'
#
# # research
# alias rnd='task add +rnd +next +@computer +@online'
#
# webpage_title () {
#     wget -qO- "$*" | hxselect -s '\n' -c  'title' 2>/dev/null
# }
#
# read_and_review () {
#     link="$1"
#     title=$(webpage_title $link)
#     echo $title
#     descr="\"Read and review: $title\""
#     id=$(task add +next +rnr "$descr" | sed -n 's/Created task \(.*\)./\1/p')
#     task "$id" annotate "$link"
# }
#
# alias rnr=read_and_review

alias grc='grc --config=generic.conf tail' # -n 100 -f

#
# timewarrior
#
alias tw='timew'


timew_summary() {
  period="${1:-:day}"
  tw summary :ids :annotations $period
}

alias ts=timew_summary

timew_next() {
  timew || tw stop
  tw continue
  tw annotate @1 $1
}

alias tn=timew_next

timew_defined() {
  # stop ev. current tracking
  timew || tw stop

  case "$1" in
    "admin")
      timew start admin && tw annotate "Catchup, admin, PR:s."
      ;;

    "comp")
      timew start comp && tw annotate "On-call compensation."
      ;;

    "core")
      timew start meeting && tw annotate "Web Core Weekly."
      ;;


    "groupapi")
      timew start meeting && tw annotate "Group API Sync."
      ;;

    "web")
      timew start meeting && tw annotate "Web Standup."
      ;;

    "daily")
      timew start meeting && tw annotate "Daily (BoL) Sync."
      ;;

    "sync")
      timew start  meeting && tw annotate "Team sync meeting."
      ;;

    "devsync")
      timew start meeting && tw annotate "Dev team sync meeting."
      ;;

    "monday")
      timew start meeting && tw annotate "Company Monday meeting."
      ;;

    "peakon")
      timew start peakon && tw annotate "Peakon survey."
      ;;

    "handover")
      timew start meeting && tw annotate "On-call handover."
      ;;

    "br")
      timew start meeting && tw annotate "Brazil Sync."
      ;;

    "")
      echo "admin"
      echo "comp"
      echo "standup"
      echo "sync"
      echo "devsync"
      echo "monday"
      echo "peakon"
      echo "handover"
      echo "br"
      ;;
  esac
}

alias twd=timew_defined

### reports
timew_report() {
  nowmonth=$(gdate +%Y-%m)
  date_string=$(gdate -d "$nowmonth-15 last month" '+%Y_%m')
  tw :lastmonth leo >| "$HOME/reports/anton_emmerik_$date_string.txt"
  open "$HOME/reports"
}

alias report=timew_report


# tmuxp configuration and aliases
export TMUXP_CONFIGDIR=$HOME/.config/tmuxp

t() {
  name="$1"
  shift

  tmux has-session -t $name > /dev/null 2>&1
  if [ $? != 0 ]; then
    # no session with name found

    tmuxp_sessions=$(tmuxp ls)

    # if exists in tmuxp configurations load it
    if (($tmuxp_sessions[(Ie)$name])); then
      # load txmup detached
      tmuxp load -d -y $name $@
    else
      # create a new detached session with name
      tmux new -d -s $name $@
    fi
  fi


  if [ -n "${TMUX}" ]; then
    # if already in tmux switch
    tmux switch -t $name
  else
    # else attach
    tmux attach -t $name
  fi

}

_t() {
  local expl
  local -a sessions
  sessions=( ${${(f)"$(command tmux list-sessions)"}/:[ $'\t']##/:} )
  _describe -t sessions 'sessions' sessions "$@"

  configs=($(tmuxp ls))
  _describe -t configs 'configs' configs "$@"
}

compdef _t t

alias ta='tmux ls'

# alias du='du -sch * .*'

# jira
alias jwatch='jira issue list -w'
alias jme='jira issue list -a$(jira me) -s~Closed'

# git
alias git-branch-issue="git symbolic-ref HEAD | grep --color=never -Eo '\w{2,5}-[0-9]+' | tr  '[:lower:]'  '[:upper:]'"
alias lg="lazygit"

# taskrwarrior
alias task-context-project="task context show | grep write | grep -Eo 'project:\w+' | sed 's/^project://'"

# bol utils
alias b="just -f ~/src/bol-cli/justfile"

# mkdir
_mkcdir() {
  mkdir -p $1
  cd "$_"
}

alias mkcdir=_mkcdir
