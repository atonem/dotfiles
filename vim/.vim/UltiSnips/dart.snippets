# TODO: Break apart dart, flutter, redux, etc.

# Stateless widget
snippet stateless "class Widget extends StatelessWidget { ... }"
class ${1:Widget} extends StatelessWidget {
  $1({
    Key key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}
endsnippet

# Statful widget
snippet stateful "class Widget extends StatefulWidget  { ... }"
class ${1:Widget} extends StatefulWidget {
  $1({
    Key key,
  }) : super(key: key);

  @override
  $1State createState() => $1State();
}

class $1State extends State<$1> {

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}
endsnippet

# Build
snippet build "Widget build(BuildContext context) { ... }"
@override
Widget build(BuildContext context) {
  return ${0:};
}
endsnippet

# initState
snippet init "void initState() { ... }"
@override
void initState() {
  super.initState();
	${0:}
}
endsnippet

# dispose
snippet dispose "void dispose() { ... }"
@override
void dispose() {
  ${0:}
  super.dipose();
}
endsnippet

# didChangeDependencies
snippet didChange "void didChangeDependencies() { ... }"
@override
void didChangeDependencies() {
	super.didChangeDependencies();
  ${0:}
}
endsnippet

# didUpdateWidget
snippet didUpdate "void didUpdateWidget(Widget oldWidget) { ... }"
@override
void didUpdateWidget(${1:Type} ${2:oldWidget}) {
  super.didUpdateWidget($2);
  ${0:}
}
endsnippet

# Redux reducer
snippet reducer "State name(State state, Action action) { ... }"
${1:State} $2($1 ${3:state}, ${4:Action} ${5:action}) {
  return $3.rebuild((b) => $0);
}
endsnippet

# Redux middleware
snippet mw "Middleware<State> name(Args) { ... }"
Middleware<${1:State}> $2($3) {
  return (Store<$1> store, dynamic ${4:action}, NextDispatcher next) {
    $0
    next(action);
  };
}
endsnippet
